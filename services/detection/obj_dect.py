from cProfile import label
import torch
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from PIL import Image
from urllib.request import urlretrieve
import random
import requests
import uuid

COCO_LABELS = ['person',
 'bicycle',
 'car',
 'motorcycle',
 'airplane',
 'bus',
 'train',
 'truck',
 'boat',
 'traffic light',
 'fire hydrant',
 'stop sign',
 'parking meter',
 'bench',
 'bird',
 'cat',
 'dog',
 'horse',
 'sheep',
 'cow',
 'elephant',
 'bear',
 'zebra',
 'giraffe',
 'backpack',
 'umbrella',
 'handbag',
 'tie',
 'suitcase',
 'frisbee',
 'skis',
 'snowboard',
 'sports ball',
 'kite',
 'baseball bat',
 'baseball glove',
 'skateboard',
 'surfboard',
 'tennis racket',
 'bottle',
 'wine glass',
 'cup',
 'fork',
 'knife',
 'spoon',
 'bowl',
 'banana',
 'apple',
 'sandwich',
 'orange',
 'broccoli',
 'carrot',
 'hot dog',
 'pizza',
 'donut',
 'cake',
 'chair',
 'couch',
 'potted plant',
 'bed',
 'dining table',
 'toilet',
 'tv',
 'laptop',
 'mouse',
 'remote',
 'keyboard',
 'cell phone',
 'microwave',
 'oven',
 'toaster',
 'sink',
 'refrigerator',
 'book',
 'clock',
 'vase',
 'scissors',
 'teddy bear',
 'hair drier',
 'toothbrush'
]
COLORS = [[0.6675430315677318, 0.29581338855036454, 0.5200273054999196], [0.030836391747390945, 0.4487720449003031, 0.38816110175095675], [0.5909018564396924, 0.09115385022221734, 0.7269613533865742], [0.8757677869006738, 0.8329980422107943, 0.2471328546014836], [0.749508184223353, 0.5171465529565918, 0.07978890500499203], [0.41556818235784954, 0.6451214316089029, 0.17842965674665467], [0.17863206289597844, 0.6739212364491349, 0.5571084776053353], [0.499407883191475, 0.38182832714790915, 0.7986523702774815], [0.5786762105141207, 0.124583057299684, 0.5013723090378472], [0.6727401478918436, 0.29804101320896603, 0.2555841266314077], [0.8081366140965891, 0.6040430645529191, 0.07836634336336401], [0.7055353005888442, 0.8685931341180604, 0.10200361362098509], [0.3441348025164792, 0.4958901315067422, 0.5086732104048356], [0.3675243673658565, 0.18390231859627015, 0.5851650676691348], [0.2315853780496876, 0.0051754973297549745, 0.45004647859072555], [0.1851819801999216, 0.1301314889490417, 0.7117739541980023], [0.20611791209452557, 0.046851855011693755, 0.7056031849270408], [0.1572568258079451, 0.02966495705449268, 0.711260797305644], [0.889583321238437, 0.4578176509981532, 0.2635922288887347], [0.9157939187729962, 0.8890637380406966, 0.16275154344622356], [0.8390274650644135, 0.5946180810558555, 0.3936005120583891], [0.17670019077422494, 0.579636766402633, 0.14219094089877848], [0.2117997039799182, 0.6789610653114864, 0.49075205045340364], [0.9001318329982277, 0.6495799051521648, 0.7048080868816574], [0.5086867535607876, 0.9542184429257025, 0.11114449207903032], [0.9901863639035724, 0.3560697142746495, 0.7986910038442476], [0.8373749742487323, 0.35225020438090726, 0.19095054683240098], [0.6797257713251414, 0.7451078752939171, 0.32031025201962215], [0.2974189448602663, 0.9378922287818385, 0.5144870403333496], [0.3064516048201277, 0.7965229601769166, 0.6534655586775275], [0.26553826510618284, 0.3830084241612922, 0.027215839373392225], [0.8316411343920109, 0.06581921926565704, 0.7471094936704215], [0.23862874858162908, 0.22083515642688745, 0.603716224397329], [0.2909284508713744, 0.07332705065486711, 0.07802373782000083], [0.09116573633951408, 0.19600535674307773, 0.9427445724263666], [0.81448038525561, 0.348317400967768, 0.00029764517188091144], [0.13630881781987447, 0.4017802347300916, 0.11946969282263109], [0.12903928253259844, 0.12256032013849749, 0.45913106788712965], [0.15514326689552838, 0.9512996546931225, 0.2995599327383526], [0.6570771833030596, 0.19296656271771606, 0.7533596065054111], [0.5265079729031227, 0.8791514731111889, 0.5173555854269262], [0.2910923979137344, 0.5400419829750409, 0.6084849923481596], [0.20060303061783868, 0.13493348693942864, 0.30417960502704433], [0.35478029531093225, 0.8453687696134681, 0.03517588063871724], [0.49722097103694674, 0.06230110624144092, 0.9367959187239464], [0.8873047775772167, 0.37980853253731905, 0.4743455177719852], [0.11584938282785151, 0.3372405397264475, 0.6180042388265116], [0.27541183245973, 0.20156995030655256, 0.5336892944837938], [0.7497921345516336, 0.591542427534122, 0.926348532708435], [0.5133132409588042, 0.37701796876151705, 0.5923767260507762], [0.4610902171661023, 0.3708398360521926, 0.5852354033255184], [0.5473822996913489, 0.6472176226297618, 0.9874912466798533], [0.8028911045755396, 0.1190531061976311, 0.6391301465549788], [0.19087639893503294, 0.4599985815378649, 0.46527231488774323], [0.20444568413532305, 0.245776326477688, 0.022233870780007492], [0.9341238548395605, 0.12344060955476399, 0.2808981145252232], [0.257967551554549, 0.22318863211989814, 0.10277829931824456], [0.03866639280298556, 0.07625574239287614, 0.7800651961267111], [0.1296490505452127, 0.8450731170450515, 0.05459791778620027], [0.231781462222451, 0.14011114010682757, 0.6058768441550583], [0.26584053098286253, 0.951345481854576, 0.9968931466591384], [0.772077776171461, 0.21224192585985868, 0.833003931667477], [0.045849844785012306, 0.7948808987184821, 0.15699563908563763], [0.1628633163573311, 0.6776820483883775, 0.6564822206912481], [0.976219124162468, 0.7250738179449264, 0.3349363209411439], [0.5323710720189005, 0.35862423840303825, 0.5165465649238717], [0.718662323685631, 0.9971457626302355, 0.17706527995517385], [0.0011479743039816137, 0.015487775336699316, 0.43149319281717213], [0.029628025415439185, 0.9790675714603804, 0.6791124626930665], [0.5013666766149739, 0.8923824249927098, 0.9919496838974119], [0.7955001617470533, 0.9912104931506591, 0.8157299183562997], [0.8776705110953729, 0.5947545259732125, 0.8688398405232794], [0.31131055779310723, 0.8852168325768508, 0.005477246413896686], [0.26779832568575523, 0.47913422327416255, 0.3889100596923535], [0.8964485825283898, 0.16192460609470616, 0.2670996296185949], [0.6151346586074316, 0.7208561988779754, 0.04930606069701404], [0.8851795357387685, 0.05130126085910702, 0.8285350008678535], [0.8683543243867836, 0.834500222870153, 0.38280329537392555], [0.638343277488518, 0.8912113736206995, 0.3479719940144007], [0.29210460855902887, 0.8051716058006738, 0.05453683913135565]]

class DiscordBotObjectDetection:
    def __init__(self):
        
        self.model = self.load_model()
        self.classes = self.model.names
        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'
        
    def load_model(self):
        model = torch.hub.load('yolov5-master', 'custom', 'yolov5-master/yolov5x.pt', source='local')
        model.conf = 0.45
        model.iou = 0.5
        return model
    
    def handle_image_url(self, image_url):
        response = requests.get(image_url, stream=True)
        img = Image.open(response.raw)
    
        return img

    def score_img(self, image):
        self.model.to(self.device)
        image = [image]
        rs = self.model(image)
        labels, coords,prob = rs.xyxyn[0][:,-1], rs.xyxyn[0][:,:-1], rs.xyxyn[0][:,4]
        return labels,coords,prob

    

    def get_detection(self, image_url):
        self.image = self.handle_image_url(image_url)
        labels,coords, probs = self.score_img(self.image)
        class_label = COCO_LABELS
        colors = COLORS
        im = np.array(self.image)
        height, width, _ = im.shape
        n = len(labels)
        fig, ax = plt.subplots(1)
        # Display the image
        ax.imshow(im)
        
        for i in range(n):
            row = coords[i]
            prob = str("{:.3f}".format(float(probs[i])))
            if row[4]>= 0.2:
                x1, y1, x2, y2 = int(row[0]*width), int(row[1]*height), int(row[2]*width), int(row[3]*height)
                
                width_b,heigh_b,cen_x,cen_y = (x2-x1),(y2-y1),(x1+x2)/2,(y1+y2)/2
                x,y = cen_x - width_b/2, cen_y-heigh_b/2
                
                rect = patches.Rectangle(
                (x , y ),
                width_b,
                heigh_b,
                linewidth=1.2,
                edgecolor = colors[int(labels[i])],
                facecolor = "none",
                 )
                ax.add_patch(rect)
                plt.text(
                    x1,
                    y1,
                s=' '.join((class_label[int(labels[i])],prob)) ,
                color="white",
                verticalalignment="top",
                bbox={"color": colors[int(labels[i])], "pad": 0},
                 fontsize = 'xx-small')
                 
        plt.axis('off')
        name = str(uuid.uuid1())+".png"
        plt.savefig(name,transparent = True)        
        return name




